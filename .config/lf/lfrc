# Set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# Set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# Leave some space at the top and the bottom of the screen
set scrolloff 10

# Use enter for shell commands
map <enter> shell

# Set prompt
set promptfmt "\033[31;1m[\033[33;1m%u\033[32;1m@\033[34;1m%h \033[35;1m%d\033[0m\033[1m%f\033[0m\033[31;1m]"

# Use icons
set icons

# Draw boxes
set drawbox

# Execute current file (must be executable)
map x $$f
map X !$f

# Dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# Set previewer
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

# Set path to terminal title
cmd on-cd &{{
    printf "\033]0;[$(basename $PWD)] lf \007" > /dev/tty
}}
on-cd

# Define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L "$f" && f=$(readlink -f "$f")
    case $(file --mime-type "$f" -b) in
        image/*) nsxiv-rifle "$f" & disown ;;
        video/*) vlc "$f" 2>/dev/null & disown ;;
        application/pdf) mupdf "$f" & disown ;;
        text/*|application/*) $EDITOR "$fx" ;;
        *) xdg-open "$f" ;;
    esac
}}

# Go to file with fzf
cmd fzf_jump ${{
    res="$(find . | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map f :fzf_jump

# Make sure trash folder exists
%mkdir -p ~/.local/share/Trash

# Move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.local/share/Trash


# Use '<delete>' key for 'trash' command
map <delete> trash
